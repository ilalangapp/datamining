#Dataset is "Rain in Australia" from https://www.kaggle.com/jsphyg/weather-dataset-rattle-package

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#import dataset
data=pd.read_csv("weatherAUS.csv",sep=",")
data.head()
data.tail()

#check type and shape of data
print(data.shape)
data.info()

#Change the type of "Date" variable
import datetime
data['Date']=pd.to_datetime(data['Date'])
data.info()

#Drop RISK_MM Variable
data.drop(['RISK_MM'], axis=1, inplace=True)

#Get Descriptive Statistics for numerical variables
data.describe()

#Get Descriptive Statistics for categorical variables
data.describe(include=['object'])

#Check Outliers using boxplot
plt.figure(figsize=(20,60))

plt.subplot(6,2,1)
fig=data.boxplot(column='WindSpeed9am')
fig.set_title('')
fig.set_ylabel('WindSpeed9am')

plt.subplot(6,2,2)
fig=data.boxplot(column='WindSpeed3pm')
fig.set_title('')
fig.set_ylabel('WindSpeed3pm')

plt.subplot(6,2,3)
fig=data.boxplot(column='Humidity9am')
fig.set_title('')
fig.set_ylabel('Humidity9am')

plt.subplot(6,2,4)
fig=data.boxplot(column='Humidity3pm')
fig.set_title('')
fig.set_ylabel('Humidity3pm')

plt.subplot(6,2,5)
fig=data.boxplot(column='Pressure9am')
fig.set_title('')
fig.set_ylabel('Pressure9am')

plt.subplot(6,2,6)
fig=data.boxplot(column='Pressure3pm')
fig.set_title('')
fig.set_ylabel('Pressure3pm')

plt.subplot(6,2,7)
fig=data.boxplot(column='Temp9am')
fig.set_title('')
fig.set_ylabel('Temp9am')

plt.subplot(6,2,8)
fig=data.boxplot(column='Temp3pm')
fig.set_title('')
fig.set_ylabel('Temp3pm')

plt.subplot(6,2,9)
fig=data.boxplot(column='MaxTemp')
fig.set_title('')
fig.set_ylabel('MaxTemp')

plt.subplot(6,2,10)
fig=data.boxplot(column='MinTemp')
fig.set_title('')
fig.set_ylabel('MinTemp')

plt.subplot(6,2,11)
fig=data.boxplot(column='Rainfall')
fig.set_title('')
fig.set_ylabel('Rainfall')

plt.subplot(6,2,12)
fig=data.boxplot(column='WindGustSpeed')
fig.set_title('')
fig.set_ylabel('WindGustSpeed')

#Check data distribution using histogram
plt.figure(figsize=(20,30))

plt.subplot(6,2,1)
fig=data.WindSpeed9am.hist(bins=50)
fig.set_xlabel('WindSpeed9am')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,2)
fig=data.WindSpeed3pm.hist(bins=50)
fig.set_xlabel('WindSpeed3pm')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,3)
fig=data.Humidity9am.hist(bins=50)
fig.set_xlabel('Humidity9am')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,4)
fig=data.Humidity3pm.hist(bins=50)
fig.set_xlabel('Humidity3pm')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,5)
fig=data.Pressure9am.hist(bins=50)
fig.set_xlabel('Pressure9am')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,6)
fig=data.Pressure3pm.hist(bins=50)
fig.set_xlabel('Pressure3pm')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,7)
fig=data.Temp9am.hist(bins=50)
fig.set_xlabel('Temp9am')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,8)
fig=data.Temp3pm.hist(bins=50)
fig.set_xlabel('Temp3pm')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,9)
fig=data.MaxTemp.hist(bins=50)
fig.set_xlabel('MaxTemp')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,10)
fig=data.MinTemp.hist(bins=50)
fig.set_xlabel('MinTemp')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,11)
fig=data.Rainfall.hist(bins=50)
fig.set_xlabel('Rainfall')
fig.set_ylabel('Number of Counties')

plt.subplot(6,2,12)
fig=data.WindGustSpeed.hist(bins=50)
fig.set_xlabel('WindGustSpeed')
fig.set_ylabel('Number of Counties')

#Check the missing value
print("The percentage of missing value:")
print(data.shape)
for col in data.columns:
    print(col+ " : "+ str(round(data[col].isnull().sum()/data.shape[0]*100,2))+"%")

#Drop 'Evaporation', 'Sunshine', 'Cloud9am', 'Cloud3pm' variables
data.drop(['Evaporation','Sunshine', 'Cloud9am','Cloud3pm'], axis=1, inplace=True)
data.info()

#Make a list for the names of numerical variables
num=[var for var in data.columns if data[var].dtype!='O']
num=num[1:] #without 'Date' variable
print(num)

#Make a list for the names of categorical variables
cat = [col for col in data.columns if data[col].dtypes == 'O']
print(cat)

#impute missing value in numerical variable by its median
for data1 in [data]:
    for col in num:
        col_median=data[col].median()
        data1[col].fillna(col_median, inplace=True)
data[num].isnull().sum()

#impute missing value in categorical variable by its mode
for data2 in [data]:
    for col in cat:
        col_mode=data[col].mode()[0]
        data2[col].fillna(col_mode, inplace=True)
data[cat].isnull().sum()

#Get the correlation among numerical variables
correlation=data[num].corr()
print(correlation)

#Make Correlation Plot
plt.figure(figsize=(16,12))
corrplot=sns.heatmap(correlation, square=True, annot=True, fmt='.2f', linecolor='white')
corrplot.set_xticklabels(corrplot.get_xticklabels(),rotation=30)
corrplot.set_yticklabels(corrplot.get_yticklabels())
plt.show()

#Make Pie chart of "RainTomorrow" variable
data['RainTomorrow'].value_counts().plot.pie(autopct='%1.2f%%')

#Make Some Bar Charts
sns.countplot(x='RainToday',data=data,hue='RainTomorrow')

plt.figure(figsize=(20,10))
loc=sns.countplot(x='Location',data=data,hue='RainTomorrow')
loc.set_xticklabels(loc.get_xticklabels(),rotation=90)

#Make boxplots grouped by 'RainTomorrow' variables
plt.figure(figsize=(20,60))

plt.subplot(6,2,1)
sns.boxplot(data=data,x="RainTomorrow",y="WindSpeed9am")

plt.subplot(6,2,2)
sns.boxplot(data=data,x="RainTomorrow",y="WindSpeed3pm")

plt.subplot(6,2,3)
sns.boxplot(data=data,x="RainTomorrow",y="Humidity9am")

plt.subplot(6,2,4)
sns.boxplot(data=data,x="RainTomorrow",y="Humidity3pm")

plt.subplot(6,2,5)
sns.boxplot(data=data,x="RainTomorrow",y="Pressure9am")

plt.subplot(6,2,6)
sns.boxplot(data=data,x="RainTomorrow",y="Pressure3pm")

plt.subplot(6,2,7)
sns.boxplot(data=data,x="RainTomorrow",y="Temp9am")

plt.subplot(6,2,8)
sns.boxplot(data=data,x="RainTomorrow",y="Temp3pm")

plt.subplot(6,2,9)
sns.boxplot(data=data,x="RainTomorrow",y="MaxTemp")

plt.subplot(6,2,10)
sns.boxplot(data=data,x="RainTomorrow",y="MinTemp")

plt.subplot(6,2,11)
sns.boxplot(data=data,x="RainTomorrow",y="Rainfall")

plt.subplot(6,2,12)
sns.boxplot(data=data,x="RainTomorrow",y="WindGustSpeed")

#Make a new data frame without "Date" variable
simpan=data.drop('Date',axis=1)
simpan.dtypes

#Make a data frame grouped by "RainTomorrow" variable
yes=simpan[simpan['RainTomorrow']=='Yes']
no=simpan[simpan['RainTomorrow']=='No']
yes.head()
no.head()

#Make some comparasions among some variables grouped by "RainTomorrow" variable
plt.figure(figsize=(10,8))
plt.scatter(yes["WindSpeed9am"],yes["WindSpeed3pm"], color="green",label="yes",alpha=0.75)
plt.scatter(no["WindSpeed9am"],no["WindSpeed3pm"], color="red",label="no",alpha=0.05)
plt.xlabel("WindSpeed9am")
plt.ylabel("WindSpeed3pm")
plt.title("Scatter Plot of WindSpeed")
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.scatter(yes["Temp9am"],yes["Temp3pm"], color="green",label="yes",alpha=0.75)
plt.scatter(no["Temp9am"],no["Temp3pm"], color="red",label="no",alpha=0.05)
plt.xlabel("Temp9am")
plt.ylabel("Temp3pm")
plt.title("Scatter Plot of Temp")
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.scatter(yes["MaxTemp"],yes["MinTemp"], color="green",label="yes",alpha=0.75)
plt.scatter(no["MaxTemp"],no["MinTemp"], color="red",label="no",alpha=0.05)
plt.xlabel("MaxTemp")
plt.ylabel("MinTemp")
plt.title("Scatter Plot of Temp")
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.scatter(yes["Humidity9am"],yes["Humidity3pm"], color="green",label="yes",alpha=0.75)
plt.scatter(no["Humidity9am"],no["Humidity3pm"], color="red",label="no",alpha=0.05)
plt.xlabel("Humidity9am")
plt.ylabel("Humidity3pm")
plt.title("Scatter Plot of Humidity")
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.scatter(yes["Pressure9am"],yes["Pressure3pm"], color="green",label="yes",alpha=0.75)
plt.scatter(no["Pressure9am"],no["Humidity3pm"], color="red",label="no",alpha=0.05)
plt.xlabel("Pressure9am")
plt.ylabel("Pressure3pm")
plt.title("Scatter Plot of Humidity")
plt.legend()
plt.show()
